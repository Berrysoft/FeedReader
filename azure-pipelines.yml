trigger:
- master

variables:
  sdkVersion: '3.1.100-preview3-014645'
  project: 'FeedReader/FeedReader.csproj'

jobs:
- job: Windows
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.1'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(project)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - script: dotnet publish $(project) -c Release -o build\netcoreapp3.1 -v n
    displayName: 'Publish project as netcoreapp3.1'

  - script: del build\netcoreapp3.1\*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build\netcoreapp3.1'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\FeedReader.Win64.zip'

  # - script: dotnet publish $(project) -r win-x64 -c Release -o build\native -p:PublishNative=true -v n
  #   displayName: 'Publish project as native'

  # - script: del build\native\*.pdb
  #   displayName: 'Remove PDBs'

  # - script: del build\native\*.json
  #   displayName: 'Remove JSONs'

  # - task: ArchiveFiles@2
  #   displayName: 'Archive'
  #   inputs:
  #     rootFolderOrFile: 'build\native'
  #     includeRootFolder: false
  #     archiveType: 'zip'
  #     archiveFile: '$(Build.ArtifactStagingDirectory)\FeedReader.Win64.Native.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: Linux
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.1'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(project)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config
      
  - script: |
      wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      sudo apt-add-repository "deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.9 main"
      sudo apt -o Acquire::AllowInsecureRepositories=true update && sudo apt-get install clang-3.9 lldb-3.9 comerr-dev krb5-multidev libgssrpc4 libkadm5clnt-mit9 libkadm5srv-mit9 libkdb5-8 libkrb5-dev
      sudo ln /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 /usr/lib/libgssapi_krb5.so
    displayName: 'Install clang-3.9'

  - script: dotnet publish $(project) -c Release -o build/netcoreapp3.1 -v n
    displayName: 'Publish project as netcoreapp3.1'

  - script: rm build/netcoreapp3.1/*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/netcoreapp3.1'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/FeedReader.Linux64.tar.gz'

  # - script: dotnet publish $(project) -r linux-x64 -c Release -o build/linux-x64 -p:PublishNative=true -v n
  #   displayName: 'Publish project as native'

  # - script: strip build/linux-x64/FeedReader
  #   displayName: 'Strip'

  # - script: rm build/linux-x64/*.pdb
  #   displayName: 'Remove PDBs'

  # - script: rm build/linux-x64/*.json
  #   displayName: 'Remove JSONs'

  # - task: ArchiveFiles@2
  #   displayName: 'Archive'
  #   inputs:
  #     rootFolderOrFile: 'build/linux-x64'
  #     includeRootFolder: false
  #     archiveType: 'tar'
  #     tarCompression: 'gz'
  #     archiveFile: '$(Build.ArtifactStagingDirectory)/FeedReader.Linux64.Native.tar.gz'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'

- job: MacOS
  pool:
    vmImage: 'macOS-latest'
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK 3.1'
    inputs:
      packageType: sdk
      version: '$(sdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project'
    inputs:
      projects: '$(project)'
      command: restore
      feedsToUse: config
      nugetConfigPath: NuGet.Config

  - script: dotnet publish $(project) -c Release -o build/netcoreapp3.1 -v n
    displayName: 'Publish project as netcoreapp3.1'

  - script: rm build/netcoreapp3.1/*.pdb
    displayName: 'Remove PDBs'

  - task: ArchiveFiles@2
    displayName: 'Archive'
    inputs:
      rootFolderOrFile: 'build/netcoreapp3.1'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/FeedReader.OSX64.zip'

  # - script: dotnet publish $(project) -r osx-x64 -c Release -o build/osx-x64 -p:PublishNative=true -v n
  #   displayName: 'Publish project as native'
  
  # - script: strip build/osx-x64/FeedReader
  #   displayName: 'Strip'

  # - script: rm build/osx-x64/*.pdb
  #   displayName: 'Remove PDBs'

  # - script: rm build/osx-x64/*.json
  #   displayName: 'Remove JSONs'

  # - task: ArchiveFiles@2
  #   displayName: 'Archive'
  #   inputs:
  #     rootFolderOrFile: 'build/osx-x64'
  #     includeRootFolder: false
  #     archiveType: 'zip'
  #     archiveFile: '$(Build.ArtifactStagingDirectory)/FeedReader.OSX64.Native.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'
