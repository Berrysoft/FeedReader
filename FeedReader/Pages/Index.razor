@page "/"
@using System.Diagnostics
@using System.ServiceModel.Syndication
@using System.Xml
@using FeedReader.Data
@using HtmlAgilityPack
@using Microsoft.EntityFrameworkCore
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@using (var context = new FeedContext())
{
    @if (context.Database.EnsureCreated())
    {
        <p>Welcome! Press the "+" below to add a feed.</p>
    }
    <div class="row">
        <div class="col-4">
            <div class="list-group list-group-flush" id="list-tab" role="tablist">
                @foreach (var (feed, i) in context.Feeds.AsEnumerable().Select((f, index) => (f, index)))
                {
                    <a class="list-group-item list-group-item-action d-flex justify-content-between align-items-center @(i == 0 ? "active" : string.Empty)" id="list-@(feed.Id)-list" data-toggle="list" href="#list-@(feed.Id)" role="tab">
                        <div>
                            <img src="@feed.ImageUri" width="16" height="16" aria-hidden="true" />
                            @feed.Title
                        </div>
                        <div>
                            <span class="badge @(refreshed == null ? "badge-warning" : (refreshed[i] switch { null => "badge-warning", true => "badge-primary", false => "badge-danger" })) badge-pill">
                                @context.Posts.Where(post => post.FeedId == feed.Id && post.LastReadTime == null).Count()
                            </span>
                            <span class="fas fa-trash-alt text-danger" @onclick="() => RemoveFeed(feed)" aria-label="Delete"></span>
                        </div>
                    </a>
                }
                <a class="list-group-item list-group-item-action text-center" @onclick="ShowAddFeed" aria-label="Add">
                    <span class="text-success">+</span>
                </a>
            </div>
        </div>
        <div class="col-8">
            <div class="tab-content" id="nav-tabContent">
                @foreach (var (feed, i) in context.Feeds.AsEnumerable().Select((f, index) => (f, index)))
                {
                    <div class="tab-pane fade @(i == 0 ? "show active" : string.Empty)" id="list-@(feed.Id)" role="tabpanel" aria-labelledby="list-@(feed.Id)-list">
                        <ul class="list-group list-group-flush">
                            @foreach (var p in context.Posts.Where(post => post.FeedId == feed.Id).OrderBy(post => post.LastReadTime).ThenByDescending(post => post.UpdateTime))
                            {
                                <li class="list-group-item list-group-item-action" style="cursor: pointer" @onclick="() => OpenPost(p)">
                                    <h3>@p.Title</h3>
                                    <p class="text-secondary">
                                        <time datetime="@p.UpdateTime">@p.UpdateTime</time>
                                    </p>
                                    <p>@((MarkupString)p.Description)</p>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    bool?[]? refreshed;

    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync();
    }

    private void UpdatePost(BlogPost blogPost, SyndicationItem item)
    {
        blogPost.PostId = item.Id;
        blogPost.Title = item.Title?.Text;
        blogPost.Link = item.Links.FirstOrDefault()?.Uri?.ToString();
        //if (item.Summary != null)
        //{
        //    HtmlDocument doc = new HtmlDocument();
        //    doc.LoadHtml(item.Summary?.Text);
        //    var des = doc.DocumentNode.InnerText;
        //    if (des.Length > 100)
        //    {
        //        des = des.Substring(0, 100);
        //    }
        //    blogPost.Description = des.Replace('\n', ' ');
        //}
        //else
        //{
        //    blogPost.Description = null;
        //}
        blogPost.Description = item.Summary?.Text;
        blogPost.UpdateTime = item.PublishDate > item.LastUpdatedTime ? item.PublishDate.DateTime : item.LastUpdatedTime.DateTime;
    }

    private async Task UpdateFeedAsync(FeedContext context, Feed feed)
    {
        using (var response = await Http.GetAsync(feed.FeedUri))
        using (var stream = await response.Content.ReadAsStreamAsync())
        using (var reader = XmlReader.Create(stream))
        {
            var sf = SyndicationFeed.Load(reader);
            feed.Title = sf.Title?.Text;
            feed.Link = sf.Links.FirstOrDefault()?.Uri?.ToString();
            feed.ImageUri = sf.ImageUrl?.ToString();
            if (feed.ImageUri == null)
            {
                var fu = new Uri(feed.FeedUri);
                feed.ImageUri = fu.GetLeftPart(UriPartial.Authority) + "/favicon.ico";
            }
            feed.LastBuildDate = sf.LastUpdatedTime.DateTime;
            feed.Generator = sf.Generator;
            int readed = feed.Count - feed.RemainCount;
            int count = 0;
            foreach (var item in sf.Items)
            {
                BlogPost? blogPost = context.Posts.Find(feed.Id, item.Id);
                if (blogPost != null)
                {
                    if (blogPost.UpdateTime < item.LastUpdatedTime.DateTime || blogPost.UpdateTime < item.PublishDate.DateTime)
                    {
                        blogPost.FeedId = feed.Id;
                        UpdatePost(blogPost, item);
                        blogPost.LastReadTime = null;
                        context.Posts.Update(blogPost);
                        readed--;
                    }
                }
                else
                {
                    blogPost = new BlogPost();
                    blogPost.FeedId = feed.Id;
                    UpdatePost(blogPost, item);
                    blogPost.LastReadTime = null;
                    context.Posts.Add(blogPost);
                }
                count++;
            }
            feed.Count = count;
            feed.RemainCount = count - readed;
        }
    }

    private Feed? AddFeedInternal(FeedContext context, string feedUri)
    {
        if (!context.Feeds.Any(feed => feed.FeedUri == feedUri))
        {
            Feed feed = new Feed();
            feed.FeedUri = feedUri;
            context.Feeds.Add(feed);
            return feed;
        }
        else
        {
            return null;
        }
    }

    private async void ShowAddFeed()
    {
        var uri = await JSRuntime.InvokeAsync<string>("prompt", "Please input feed uri:");
        if (!string.IsNullOrEmpty(uri))
        {
            using (var context = new FeedContext())
            {
                var feed = AddFeedInternal(context, uri);
                if (feed != null)
                {
                    context.SaveChanges();
                    await RefreshInternalAsync(context, feed);
                }
            }
        }
    }

    private async Task<bool> RefreshInternalAsync(FeedContext context, Feed feed)
    {
        try
        {
            await UpdateFeedAsync(context, feed);
            context.Feeds.Update(feed);
        }
        catch (Exception)
        {
            return false;
        }
        try
        {
            context.SaveChanges();
        }
        catch (DbUpdateException ex)
        {
            Debug.WriteLine(ex);
        }
        StateHasChanged();
        return true;
    }

    private async Task RefreshAsync()
    {
        using (var context = new FeedContext())
        {
            refreshed = new bool?[context.Feeds.Count()];
            foreach (var (feed, i) in context.Feeds.AsEnumerable().Select((f, index) => (f, index)))
            {
                refreshed[i] = await RefreshInternalAsync(context, feed);
            }
        }
    }

    private void OpenPost(BlogPost post)
    {
        ProcessStartInfo info = new ProcessStartInfo(post.Link);
        info.UseShellExecute = true;
        Process.Start(info);
        UpdateLastReadTime(post);
    }

    private void UpdateLastReadTime(BlogPost post)
    {
        using (var context = new FeedContext())
        {
            post.LastReadTime = DateTime.Now;
            context.Posts.Update(post);
            context.SaveChanges();
        }
    }

    private void RemoveFeed(Feed feed)
    {
        using (var context = new FeedContext())
        {
            context.Posts.RemoveRange(context.Posts.Where(post => post.FeedId == feed.Id));
            context.Feeds.Remove(feed);
            context.SaveChanges();
        }
    }
}
